" execute pathogen#infect()
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'

Plug 'jlanzarotta/bufexplorer'
Plug 'yssl/QFEnter'
Plug 'drmingdrmer/vim-toggle-quickfix'

Plug 'majutsushi/tagbar'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'easymotion/vim-easymotion'

Plug 'tpope/vim-fugitive'
Plug 'whiteinge/diffconflicts'
Plug 'airblade/vim-gitgutter'

Plug 'ggreer/the_silver_searcher'

Plug 'fatih/vim-go'
Plug 'tpope/vim-rails'
Plug 'vim-syntastic/syntastic'

Plug 'mhinz/vim-startify'

Plug 'tpope/vim-surround'

" Themes

Plug 'wadackel/vim-dogrun'

call plug#end()

" Break some bad habits
"noremap <Up> <NOP>
"noremap <Down> <NOP>
"noremap <Left> <NOP>
"noremap <Right> <NOP>

" standard stuff
set nocompatible
set backspace=2       " enable backspace to work as expected
set tabstop=2         " a tab is 2 spaces
set smartindent       " nosi:  Smart indent useless when C-indent is on
set expandtab         " use spaces instead of tabs
set shiftwidth=2      " sw:  a healthy tab stop
set textwidth=110     " tw:  wrap at 110 characters
set autoindent        " ai:  indent to match previous line
set formatoptions=crql  " fo:  word wrap, format comments
set showmatch         " show matches on parens, bracketc, etc.
set diffopt+=vertical " Show diffs vertically
" Better diffs
" https://vimways.org/2018/the-power-of-diff/
set diffopt+=algorithm:patience
set diffopt+=indent-heuristic
" set list              " Show whitespace characters
set esckeys


" Highlight the 120 column limit
highlight ColorColumn ctermbg=cyan
set colorcolumn=121

set directory=$HOME/.vim/swapfiles/
filetype plugin indent on
syntax on
autocmd BufWritePre * %s/\s\+$//e " Remove white space on save
" Do not freeze on CTRL-S (do not move this comment after the command. It breaks!)
silent !stty -ixon > /dev/null 2>/dev/null

" use new regex engine for syntax highlighting
" https://stackoverflow.com/questions/16902317/vim-slow-with-ruby-syntax-highlighting
set re=1

set incsearch         " search as you type
set hlsearch          " highlight search results

" Do not overwrite buffer when pasting
vnoremap p "_dp
vnoremap P "_dP
" Clipboard
vmap <C-x> :!pbcopy<CR>
vmap <C-c> :w !pbcopy<CR><CR>
" read and write from system clipboard
" set clipboard=unnamed

" key remappings
let mapleader = "\<Space>"
nmap ; :
nnoremap <Leader>p :set invpaste<CR>

" SPLIT WINDOWS
set wmh=0         " minimise split windows completely instead of leaving current line
set splitbelow
set splitright
" close all windows with Leader,q
map <Leader>q :qa<CR>
" Move window up,download,left,right - ctrl+w ctrl+[h,j,k,l]
map <C-w><C-k> <C-w><S-K>
map <C-w><C-j> <C-w><S-J>
map <C-w><C-h> <C-w><S-H>
map <C-w><C-l> <C-w><S-L>
" move down a window when in split screen mode
map <C-J> <C-W>j<C-W>_
" move up a window when in split screen mode
map <C-K> <C-W>k<C-W>_

" Tabs
map <C-t><up> :tabr<cr>
map <C-t><down> :tabl<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>

" space,y - yank to system clipboard
map <Leader>y "*y

" Quickfix toggle
nmap <C-s><C-s> <Plug>window:quickfix:loop

" COLORS
set bg=dark
colorscheme dogrun
if &diff
  colorscheme dogrun
endif
" do not make transparent backgrounds opaque by highlighting them
hi Normal ctermbg=none

" Filetype mappers
augroup filetypedetect
  au! BufRead,BufNewFile *.hamlc	setfiletype	haml " hamlc => haml
augroup END

autocmd filetype crontab setlocal nobackup nowritebackup

" ctags
set tags=./tags;

" plugins update the buffer quicker (default is 4000)
set updatetime=100

" --------------- PLUGINS -------------------------------

" vim-gutter- https://vimawesome.com/plugin/vim-gitgutter
" :GitGutterToggle - enable/disable
" You can jump between hunks with [c and ]c.
" You can preview, stage, and undo hunks with <leader>hp, <leader>hs, and <leader>hu respectively.
" Highlight git changes like vimdiff
map <Leader>hh :GitGutterLineHighlightsToggle<CR>

" NERDTree - leader,e - Toggle NERDTree window
map <Leader>e :NERDTreeToggle<CR>
let NERDTreeMapOpenVSplit = '<C-v>' " Ctrl+v - open vsplit
let NERDTreeMapOpenSplit = '<C-x>' " Ctrl+x - open split
" Open NERDTree if no files opened
" autocmd vimenter * if !argc() | NERDTree | endif

" NERDComment
" https://github.com/scrooloose/nerdcommenter#default-mappings
" '-' - toggle comments
map - <Leader>c<Space>
let g:NERDSpaceDelims = 1

" Tagbar - Leader,t - Toggle Tagbar window
" jump to tagbar when you open it. Close it when you select something
" https://github.com/majutsushi/tagbar/blob/master/doc/tagbar.txt#L193
map <Leader>t :TagbarOpenAutoClose<CR>
" airline - https://github.com/vim-airline/vim-airline/blob/master/README.md
set laststatus=2

" vim-surround
" https://github.com/tpope/vim-surround
" r" - surround current word with "word"
" r( - surround current word with ( word )
" r) - surround current word with (word) - no space
map <Leader>r ysiw

" fzf
map <Leader><tab> :FZF<CR>

" Leader,n - toggle => relative numbers, static numbers, no numbers
map <Leader>n :exe 'set nu!' &nu ? 'rnu!' : ''<CR>
set relativenumber    " display relative line numbers
set number " display the current line number
" make line numbers white
hi LineNr ctermfg=white

" json pretty - Leader,j
map <Leader>j :%!jq '.'

" The Silver Searcher - Ag (fast search)
set grepprg=ag\ --nogroup\ --nocolor
" K - search for the word under the cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Airline
let g:airline_section_b = ''

" BufExplore - navigate buffers
" https://github.com/jlanzarotta/bufexplorer/blob/master/doc/bufexplorer.txt
map <Leader>w :ToggleBufExplorer<CR>

" Vim-caser - change casing
" https://github.com/arthurxavierx/vim-caser
" gsm - MixedCase
" gsp - PascalCase
" gsc - camelCase
" gss/gs_ - snake_case
" gsu/gsU - UPPER_CASE
" gst - Title Case
" gs<space> space case
" gsk - dash-case or kebab-case
" gs. - dot.case

" ------------ Git (Fugitive) ---------------------
" git blame - f,b
map fb :Gblame<CR>
" git status - f,s
"     - open file : enter
"     - open split : o
"     - open vsplit : S
map fs :Gstatus<CR>
" git add - f,a
map fa :Gwrite<CR>
" git diff - f,d
map fd :Gdiff<CR>
" git diff --staged - f,f
map ff :Gdiff HEAD<CR>
