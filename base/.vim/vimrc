" ######################## CHEATSHEET
" Cheatsheet
" :r !command #results of command appended to buffer
" insert mode -> ctrl-o #returns to normal mode for one command, then back to insert
" 50% #go to line at 50% of the file
" / ctrl-r ctrl-o # add current word to search

" ######################## PLUGINS
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'

Plug 'jlanzarotta/bufexplorer'
Plug 'yssl/QFEnter'
Plug 'drmingdrmer/vim-toggle-quickfix'

Plug 'majutsushi/tagbar'

Plug 'itchyny/lightline.vim'

" Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'easymotion/vim-easymotion'
Plug 'junegunn/limelight.vim'

Plug 'tpope/vim-fugitive'
Plug 'whiteinge/diffconflicts'
Plug 'airblade/vim-gitgutter'

Plug 'ggreer/the_silver_searcher'

Plug 'mattn/emmet-vim', {'for': 'html'}
Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoUpdateBinaries' }
Plug 'tpope/vim-rails', {'for': 'ruby'}
Plug 'hashivim/vim-terraform', {'for': 'terraform'}
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'

Plug 'AndrewRadev/splitjoin.vim'
" Plug 'vim-syntastic/syntastic' - very slow
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'arthurxavierx/vim-caser'

Plug 'mhinz/vim-startify'

Plug 'tpope/vim-surround'
Plug 'luochen1990/rainbow'
Plug 'camspiers/animate.vim'

Plug 'madox2/vim-ai'

" Themes
" Plug 'wadackel/vim-dogrun'
Plug 'dracula/vim'
Plug 'romainl/Apprentice'

call plug#end()

" ######################## TOP LEVEL CONFIG
set nocompatible                    " use vim instead of vi settings
let mapleader = "\<Space>"

" Open and source vimrc
map vv :vsp $MYVIMRC<CR>
autocmd! BufWritePost $MYVIMRC source $MYVIMRC

set esckeys                         " esc immediately. Do not wait for a sequence
autocmd BufWritePre * %s/\s\+$//e   " Remove trailing white space on save
filetype plugin indent on           " detect filetype and load ftplugin for it

set directory=$HOME/.vim/swapfiles/ " save swap files here
set tags=./tags;                    " ctags

" space,y - yank to system clipboard
map <Leader>y "*y
" yank to end of line
nnoremap Y y$
" toggle paste mode
nnoremap <Leader>p :set invpaste<CR>

set incsearch                       " search as you type
set ignorecase                      " ignore case when searching
set smartcase                       " ... unless you type a capital


set updatetime=100                  " plugins update the buffer quicker (default is 4000)
set history=1000
set wildmenu                        " command tab completion as menu
set backspace=2                     " enable backspace to work as expected
set confirm                         " confirm close unsaved file

" ######################## MAPPINGS
" close current window with space-q, and all windows with ctrl-q
map <Leader>q :qa<CR>
map <C-q> :qa<CR>

" Quickfix toggle
map <Leader>f <Plug>window:quickfix:loop

" json pretty - Leader,j
map <Leader>j :%!jq '.'<CR>

" Break some bad habits
" noremap <Up> <NOP>
" noremap <Down> <NOP>
" noremap <Left> <NOP>
" noremap <Right> <NOP>

" ######################## FORMATTING
set tabstop=2             " a tab is 2 spaces
set shiftwidth=2          " move 2 spaces with >
set expandtab             " use spaces instead of tabs
set smartindent           " nosi:  Smart indent useless when C-indent is on
set textwidth=110         " tw:  wrap at 110 characters
set autoindent            " ai:  indent to match previous line
set formatoptions=crql    " fo:  word wrap, format comments
set showmatch             " show matches on parens, bracketc, etc.
set diffopt+=vertical     " Show diffs vertically
set nowrap                " Don't wrap lines

" ######################## APPEARANCE

set encoding=utf-8

if &diff
  colorscheme apprentice
else
  colorscheme dracula
endif
set bg=dark
set cursorline

syntax on " syntax highlighting
" use new regex engine for syntax highlighting
" https://stackoverflow.com/questions/16902317/vim-slow-with-ruby-syntax-highlighting
set re=1

" make line numbers white
hi LineNr ctermfg=white
" Leader,n - toggle => relative numbers, static numbers, no numbers
map <Leader>n :exe 'set nu!' &nu ? 'rnu!' : ''<CR>
set relativenumber    " display relative line numbers
set number " display the current line number

" Highlight the 120 column limit
" highlight ColorColumn ctermbg=cyan
" set colorcolumn=121

" toggle transparent background
hi Normal guibg=NONE ctermbg=NONE
let t:is_transparent = 1
" do not make transparent backgrounds opaque by highlighting them
hi Normal ctermbg=none

set scrolloff=3   " number of lines to keep above/below cursor

" ######################## SPLITS/TABS
set wmh=0         " minimise split windows completely instead of leaving current line
set splitbelow
set splitright
" Open highlighted file in vertical split
map gvf :vsplit<CR>gf<CR>

" move between splits planes and collapse inactive panes
map <C-j> <C-W>j<C-W>_
map <C-k> <C-W>k<C-W>_
map <C-h> <C-W>h<C-W>\|
map <C-l> <C-W>l<C-W>\|

" Tab navigation
map <C-t><up> :tabr<cr>
map <C-t><down> :tabl<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>

" ######################## FILETYPE HANDLERS
" ignore crontab tempfile warning
autocmd filetype crontab setlocal nobackup nowritebackup

" ######################## PLUGIN CONFIG

" ------------------------ NERDTree
" leader,e - Toggle NERDTree window
map <Leader>e :NERDTreeToggle<CR>
let NERDTreeMapOpenVSplit = '<Leader>v' " Space,v - open vsplit
let NERDTreeMapOpenSplit = '<Leader>x' " Space,x - open split
" Open NERDTree if no files opened
" autocmd vimenter * if !argc() | NERDTree | endif

" ------------------------ NERDComment
" https://github.com/scrooloose/nerdcommenter#default-mappings
" - : toggle comments
let g:NERDSpaceDelims = 1

" ------------------------ Tagbar
" jump to tagbar when you open it. Close it when you select something
map <Leader>t :TagbarToggle fc<CR>

" ------------------------ vim-surround
" s" - surround current word with "word"
" s( - surround current word with ( word )
" s) - surround current word with (word) - no space
map <Leader>s ysiw

" ------------------------ Rainbow
" Matching colour parentheses
let g:rainbow_active = 1

" ------------------------ QFEnter
" Open files from quick fix window in panes/tabs
let g:qfenter_keymap = {}
let g:qfenter_keymap.open = ['<CR>']
let g:qfenter_keymap.vopen = ['<Leader>v']
let g:qfenter_keymap.hopen = ['<Leader>x']
let g:qfenter_keymap.topen = ['<Leader>t']

" ------------------------ fzf
" filenames
map ff :FZF<CR>
" text
map fa :Rg<CR>
" commit history for current file
map fg :BCommits<CR>
" vim commands
map fc :Commands<CR>
" Command History
map fh :History:<CR>

" ------------------------ Limelight
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
map <Leader>l :Limelight!!<CR>

" ------------------------ lightline
" https://github.com/itchyny/lightline.vim
set laststatus=2
let g:lightline = {}
let g:lightline.colorscheme = 'one'
" let g:lightline.colorscheme = 'darcula'

" ------------------------ BufExplore - navigate buffers
" https://github.com/jlanzarotta/bufexplorer/blob/master/doc/bufexplorer.txt
map <Leader>bb :ToggleBufExplorer<CR>

" ------------------------ Coc
" use <tab> to trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

" ------------------------ Vim-caser - change casing
" https://github.com/arthurxavierx/vim-caser
let g:caser_prefix = "gc"
" gcm - MixedCase
" gcp - PascalCase
" gcc - camelCase
" gcs/gc_ - snake_case
" gcu/gcU - UPPER_CASE
" gct - Title Case
" gc<space> space case
" gck - dash-case or kebab-case
" gc. - dot.case

" ------------------------ vim-gutter
" https://vimawesome.com/plugin/vim-gitgutter
" Highlight git changes like vimdiff
" Jump between hunks with [c and ]c.
" preview - <leader>hp
" stage - <leader>hs
" undo  - <leader>hu
map <Leader>gg :GitGutterLineHighlightsToggle<CR>

" ------------------------ Easy Motion
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)
" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)
" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" ------------------------ Git (Fugitive)
map <Leader>gb :Git blame<CR>
" git status - f,s
"     - open file : enter
"     - open split : o
"     - open vsplit : S
map <Leader>gs :Git status<CR>
map <Leader>gd :Git diff<CR>
